{
  "name": "peerconnection",
  "version": "0.1.0",
  "author": {
    "name": "Mikko Rantanen",
    "email": "jubjub@jubjubnest.net"
  },
  "homepage": "https://github.com/Rantanen/peerconnection",
  "bugs": "https://github.com/Rantanen/peerconnection/issues",
  "license": "BSD",
  "preinstall": null,
  "repository": {
    "type": "git",
    "url": "http://github.com/Rantanen/peerconnection.git"
  },
  "//": "Platform limitations is due to lack of precompiled binaries. See README.md for more information.",
  "os": [
    "linux"
  ],
  "cpu": [
    "x64"
  ],
  "devDependencies": {
    "socket.io": "~0.9.14"
  },
  "engines": {
    "node": "0.10.x"
  },
  "dependencies": {
    "bindings": "~1.1.0"
  },
  "readme": "PeerConnection\n==============\n\nPeerConnection implementation for Node.js. This allows Node.js server to\nreceive WebRTC calls from the browsers.  Only Chrome is tested for now. Firefox\nmight work when the [interop notes][interop] are taken into account.\n\nThe API started as a WebRTC server, but for the sake of familiarity its goal is\nto mimic the interface of the PeerConnection object from the browsers. For this\nreason the API is currently changing more towards the browser spec: Using\ncallbacks instead of events and making sure the method names correspond to the\nspec.\n\n[interop]: http://www.webrtc.org/interop (WebRTC interop notes)\n\nExample\n-------\n\n    var connections = [];\n    socket.on('offer', function( sdp ) {\n\t\tconsole.log( \"New offer:\" );\n        console.log( sdp.sdp );\n\n        // Create the PeerConnection and setRemoteDescription from the offer.\n\t\tvar c = new nodertc.PeerConnection();\n\t\tc.setRemoteDescription( sdp );\n\t\tconnections.push( c );\n\n        // File for writing the audio.\n        var stream = fs.createWriteStream( socket.id + \".pcm\" );\n\n\t\tc.on( 'icecandidate', function( evt ) {\n            // New ice candidate from the local socket.\n            // Emit it to the browser.\n\t\t\tsocket.emit( 'icecandidate', evt );\n\t\t});\n\n\t\tc.on( 'answer', function( evt ) {\n            // Answer from the local socket.\n            // Emit it to the browser.\n\t\t\tsocket.emit( 'answer', evt );\n\t\t});\n\n\t\tc.on( 'audio', function( evt ) {\n            // Audio from the local socket.\n            // Write it to a f ile.\n            stream.write( evt.data );\n\t\t});\n\n\t\tsocket.on( 'icecandidate', function( evt ) {\n            // icecandidate from the remote connection,\n            // add it to the local connection.\n\t\t\tc.addIceCandidate( evt );\n\t\t});\n    });\n\n\nPlatform support\n----------------\n\nSupported platforms:\n- Linux x64\n\nThe platform restrictions are due to the native [libjingle][] bindings. New\nplatforms can be added if someone compiles the bindings on these platforms.\n\nCompile libjingle on a new platform using\n\n    gclient config http://libjingle.googlecode.com/svn/trunk\n    gclient sync\n    cd trunk\n    ninja -C out/Release peerconnection_client\n\nAfter this the bindings can be compiled with `node-gyp rebuild`. The\n`binding.gyp` file assumes that libjingle is located next to node-peerclient:\n    \n    ../node-peerclient\n    ../libjingle/trunk\n\nIf this is not the case you can use the libjingle variable to specify its location:\n\n    node-gyp rebuild --libjingle=/usr/sdks/libjingle/trunk\n\n[libjingle]: http://code.google.com/p/libjingle/ (libjingle; Google Talk Voice and P2P Interoperability Library)\n\n### Thanks\n\n* Google and rest of the libjingle team for the WebRTC implementation.\n* Jo√£o Martins for the original idea on using libjingle.\n",
  "readmeFilename": "README.md",
  "_id": "peerconnection@0.1.0",
  "description": "PeerConnection ==============",
  "dist": {
    "shasum": "ed517fc246f79c89756632a77d871fcd3031535a",
    "tarball": "http://registry.npmjs.org/peerconnection/-/peerconnection-0.1.0.tgz"
  },
  "_from": "peerconnection@",
  "_npmVersion": "1.2.18",
  "_npmUser": {
    "name": "rantanen",
    "email": "jubjub@jubjubnest.net"
  },
  "maintainers": [
    {
      "name": "rantanen",
      "email": "jubjub@jubjubnest.net"
    }
  ],
  "directories": {},
  "_shasum": "ed517fc246f79c89756632a77d871fcd3031535a",
  "_resolved": "https://registry.npmjs.org/peerconnection/-/peerconnection-0.1.0.tgz"
}
